rILONGA_DEBUG
r

# Set transient time to infinite, so milonga will
# wait for OpenFOAM until it ends.
end_time = infinite

# Make dt = 1. This does not affect milonga calculations
# since it solves a steady-state problem.
# Set for making time-steps named files.
dt = 1

MESH NAME boa FILE_PATH ../boa3dtheler.msh

MILONGA_PROBLEM FORMULATION diffusion SCHEME volumes DIMENSIONS 3 GROUPS 2

PRINT "\# Number of cells: " %.0f cells

VECTOR vec_d SIZE cells

FUNCTION T(x,y,z) MESH boa CELLS VECTOR vec_T
FUNCTION Q(x,y,z) MESH boa CELLS VECTOR vec_Q

# O vetor de temperaturas é 273 na criação
#vec_T(i) = 273
#vec_Q(i) = 0

# Inclusao das funcoes de interpolacao
INCLUDE functions.was

MATERIAL fuel {
D1	     d_1_fuel(T(x,y,z))
SigmaT1      SigmaA_1_fuel(T(x,y,z))
nuSigmaF1    SigmanuF_1_fuel(T(x,y,z))
eSigmaF1     1
SigmaS1.1    SigmaS1.1_fuel(T(x,y,z))
SigmaS1.2    SigmaS1.2_fuel(T(x,y,z))
D2           d_2_fuel(T(x,y,z))
SigmaT2      SigmaA_2_fuel(T(x,y,z))
nuSigmaF2    SigmanuF_2_fuel(T(x,y,z))(T(x,y,z))
eSigmaF2     1
SigmaS2.1    SigmaS2.1_fuel(T(x,y,z))
SigmaS2.2    SigmaS1.2_fuel(T(x,y,z))
}

MATERIAL cladding {
D1	     d_1_cladding(T(x,y,z))
SigmaT1      SigmaA_1_cladding(T(x,y,z))
SigmaS1.1    SigmaS1.1_cladding(T(x,y,z))
SigmaS1.2    SigmaS1.2_cladding(T(x,y,z))
D2           d_2_cladding(T(x,y,z))
SigmaT2      SigmaA_2_cladding(T(x,y,z))
SigmaS2.1    SigmaS2.1_cladding(T(x,y,z))
SigmaS2.2    SigmaS1.2_cladding(T(x,y,z))
}

MATERIAL coolant {
D1	     d_1_coolant(T(x,y,z))
SigmaT1      SigmaA_1_coolant(T(x,y,z))
SigmaS1.1    SigmaS1.1_coolant(T(x,y,z))
SigmaS1.2    SigmaS1.2_coolant(T(x,y,z))
D2           d_2_coolant(T(x,y,z))
SigmaT2      SigmaA_2_coolant(T(x,y,z))
SigmaS2.1    SigmaS2.1_coolant(T(x,y,z))
SigmaS2.2    SigmaS1.2_coolant(T(x,y,z))
}

PHYSICAL_ENTITY NAME parede BC mirror
PHYSICAL_ENTITY NAME extremos BC vacuum
PHYSICAL_ENTITY NAME inlet BC vacuum
PHYSICAL_ENTITY NAME outlet BC vacuum

WRITE SHM_OBJECT potencias vec_Q
WRITE SHM_OBJECT temperaturas vec_T
WRITE SHM_OBJECT densidades vec_d

#static_steps = infinite

#PRINT_VECTOR vec_T
#PRINT_FUNCTION T

SEM semsent POST

power = 800

PRINT "building..."
MILONGA_STEP JUST_BUILD

PRINT "solving..."
MILONGA_STEP JUST_SOLVE

#mypow(x,y,z) := phi1(x,y,z)*100
mypow(x,y,z) := pow(x,y,z)*power

#PRINT_FUNCTION mypow

MESH_FILL_VECTOR MESH boa CELLS VECTOR vec_Q FUNCTION mypow

PRINT_VECTOR vec_Q

WRITE SHM_OBJECT potencias vec_Q

SEM semreceived WAIT

READ SHM_OBJECT densidades vec_d
READ SHM_OBJECT temperaturas vec_T

MESH_POST FILE_PATH coupled8_vacuum.vtk pow phi1 #mypow




